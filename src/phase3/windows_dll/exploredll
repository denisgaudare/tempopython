---

## üîç 1. **Explorer une DLL en d√©tail**
Une DLL (Dynamic Link Library) contient des fonctions export√©es en C/C++ ou autres langages compil√©s.

### üß∞ Outils pour explorer une DLL

| Outil                    | Utilit√© principale                                |
|--------------------------|----------------------------------------------------|
| **`dumpbin /exports`**   | Liste les fonctions export√©es (inclus dans Visual Studio) |
| **`Dependency Walker`**  | Explore visuellement les DLL import√©es/export√©es   |
| **`DLL Export Viewer`**  | Interface graphique simple pour voir les fonctions |
| **`Ghidra / IDA Free`**  | Reverse engineering (analyse binaire pouss√©e)      |
| **`objdump` / `nm`**     | Outils GNU pour inspection (Linux/MinGW)           |

---

## üß™ Exemple avec `dumpbin`

```bash
dumpbin /exports your_library.dll
```

Tu obtiens :
```
ordinal hint RVA      name
      1    0   00011000  add_numbers
      2    1   00011030  multiply_numbers
```

---

## üß© 2. Connecter une DLL avec Python

### üì¶ Utilisation standard : `ctypes`

```python
import ctypes

# Charger la DLL
mydll = ctypes.CDLL("your_library.dll")

# D√©finir les types des fonctions si possible
mydll.add_numbers.argtypes = [ctypes.c_int, ctypes.c_int]
mydll.add_numbers.restype = ctypes.c_int

# Appeler une fonction
result = mydll.add_numbers(5, 3)
print(result)  # ‚Üí 8
```

### ‚úÖ Conseils pratiques :
- **Toujours d√©clarer `argtypes` et `restype`** pour √©viter des crashs.
- Utiliser `ctypes.byref()` ou `ctypes.POINTER` pour les pointeurs.
- Tu peux mapper des structs C avec `ctypes.Structure`.

---

### üß¨ Autres alternatives

| Outil        | Description                                     | Avantages                         |
|--------------|-------------------------------------------------|-----------------------------------|
| `ctypes`     | Standard Python (pas de d√©pendance)             | Simple et portable                |
| `cffi`       | Interface C plus moderne                        | Lisibilit√©, typage, compilation   |
| `pybind11`   | Interface C++ ‚Üí Python via module compil√©       | Puissant, mais n√©cessite CMake    |
| `SWIG`       | G√©n√©rateur de bindings multi-langages           | Automatique mais complexe         |

---

## üß† Exemple avec structure C :

```c
// C side
struct Point {
    int x;
    int y;
};
int distance(struct Point* p);
```

```python
class Point(ctypes.Structure):
    _fields_ = [("x", ctypes.c_int), ("y", ctypes.c_int)]

p = Point(3, 4)
print(mydll.distance(ctypes.byref(p)))
```

---

## üîê DLL non export√©e (sans symboles) ?

Si aucune fonction n‚Äôest visible :
- La DLL a √©t√© compil√©e sans export.
- Tu dois soit avoir un **header (.h)** ou la **doc du d√©veloppeur**.
- Ou utiliser des outils comme Ghidra pour reverse-engineering.

---
